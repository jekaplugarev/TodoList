[{"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\index.tsx":"1","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\app\\store.ts":"2","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts":"3","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"4","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\utils\\error-utils.ts":"5","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"6","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx":"7","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx":"8","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\app\\App.tsx":"9","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"10","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\reportWebVitals.ts":"11","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\app\\app-reducer.ts":"12","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\Login\\Login.tsx":"13","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts":"14","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\Login\\auth-reducer.ts":"15","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\api\\todolists-api.ts":"16","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"17"},{"size":754,"mtime":1629280866882,"results":"18","hashOfConfig":"19"},{"size":1507,"mtime":1629191424296,"results":"20","hashOfConfig":"19"},{"size":5740,"mtime":1629191424299,"results":"21","hashOfConfig":"19"},{"size":1038,"mtime":1629280866864,"results":"22","hashOfConfig":"19"},{"size":811,"mtime":1596719330000,"results":"23","hashOfConfig":"19"},{"size":4278,"mtime":1629282586201,"results":"24","hashOfConfig":"19"},{"size":4321,"mtime":1629282195052,"results":"25","hashOfConfig":"19"},{"size":1649,"mtime":1629193259657,"results":"26","hashOfConfig":"19"},{"size":2802,"mtime":1629282389246,"results":"27","hashOfConfig":"19"},{"size":1258,"mtime":1629195349777,"results":"28","hashOfConfig":"19"},{"size":425,"mtime":1607869388000,"results":"29","hashOfConfig":"19"},{"size":2435,"mtime":1629191424295,"results":"30","hashOfConfig":"19"},{"size":3789,"mtime":1629282389253,"results":"31","hashOfConfig":"19"},{"size":4979,"mtime":1629191424300,"results":"32","hashOfConfig":"19"},{"size":2192,"mtime":1629191424298,"results":"33","hashOfConfig":"19"},{"size":3087,"mtime":1628927927318,"results":"34","hashOfConfig":"19"},{"size":1828,"mtime":1628927552649,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1eiiq3e",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\index.tsx",[],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\app\\store.ts",[],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts",["74"],"import {\r\n    AddTodolistActionType,\r\n    ClearDataActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType, AppThunkType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'CLEAR-DATA':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<TaskActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<TaskActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: TaskThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TaskActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ClearDataActionType\r\n    | ReturnType<typeof setTasksAC>\r\nexport type TaskThunkDispatch = Dispatch<TaskActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n\r\n",["75","76"],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\utils\\error-utils.ts",[],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["77","78","79","80","81","82"],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx",["83","84","85","86","87","88","89","90"],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx",["91","92","93"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n    label: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false, label}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div className=\"wrapper\">\r\n        <div className=\"inputTask\">\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label={label}\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n    </div>\r\n})\r\n","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\app\\App.tsx",["94","95","96","97"],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\reportWebVitals.ts",[],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\app\\app-reducer.ts",[],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\Login\\Login.tsx",["98"],"import React from 'react'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required field';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required field';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                   target={'_blank'}>here</a></p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts",["99"],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\Login\\auth-reducer.ts",[],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\api\\todolists-api.ts",[],"C:\\Users\\1\\Desktop\\IT-Inkubator\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["100","101","102"],{"ruleId":"103","severity":1,"message":"104","line":18,"column":94,"nodeType":"105","messageId":"106","endLine":18,"endColumn":96},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":31,"column":8,"nodeType":"113","endLine":31,"endColumn":10,"suggestions":"114"},{"ruleId":"111","severity":1,"message":"115","line":35,"column":8,"nodeType":"113","endLine":35,"endColumn":42,"suggestions":"116"},{"ruleId":"111","severity":1,"message":"115","line":42,"column":8,"nodeType":"113","endLine":42,"endColumn":54,"suggestions":"117"},{"ruleId":"111","severity":1,"message":"115","line":44,"column":95,"nodeType":"113","endLine":44,"endColumn":134,"suggestions":"118"},{"ruleId":"111","severity":1,"message":"115","line":45,"column":101,"nodeType":"113","endLine":45,"endColumn":140,"suggestions":"119"},{"ruleId":"111","severity":1,"message":"115","line":46,"column":107,"nodeType":"113","endLine":46,"endColumn":146,"suggestions":"120"},{"ruleId":"111","severity":1,"message":"121","line":33,"column":8,"nodeType":"113","endLine":33,"endColumn":10,"suggestions":"122"},{"ruleId":"111","severity":1,"message":"123","line":38,"column":8,"nodeType":"113","endLine":38,"endColumn":10,"suggestions":"124"},{"ruleId":"111","severity":1,"message":"123","line":43,"column":8,"nodeType":"113","endLine":43,"endColumn":10,"suggestions":"125"},{"ruleId":"111","severity":1,"message":"123","line":48,"column":8,"nodeType":"113","endLine":48,"endColumn":10,"suggestions":"126"},{"ruleId":"111","severity":1,"message":"123","line":53,"column":8,"nodeType":"113","endLine":53,"endColumn":10,"suggestions":"127"},{"ruleId":"111","severity":1,"message":"123","line":58,"column":8,"nodeType":"113","endLine":58,"endColumn":10,"suggestions":"128"},{"ruleId":"111","severity":1,"message":"123","line":63,"column":8,"nodeType":"113","endLine":63,"endColumn":10,"suggestions":"129"},{"ruleId":"111","severity":1,"message":"123","line":68,"column":8,"nodeType":"113","endLine":68,"endColumn":10,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":2,"column":9,"nodeType":"133","messageId":"134","endLine":2,"endColumn":12},{"ruleId":"131","severity":1,"message":"135","line":2,"column":14,"nodeType":"133","messageId":"134","endLine":2,"endColumn":20},{"ruleId":"131","severity":1,"message":"136","line":2,"column":22,"nodeType":"133","messageId":"134","endLine":2,"endColumn":33},{"ruleId":"131","severity":1,"message":"137","line":3,"column":8,"nodeType":"133","messageId":"134","endLine":3,"endColumn":12},{"ruleId":"131","severity":1,"message":"138","line":14,"column":8,"nodeType":"133","messageId":"134","endLine":14,"endColumn":17},{"ruleId":"131","severity":1,"message":"139","line":15,"column":8,"nodeType":"133","messageId":"134","endLine":15,"endColumn":18},{"ruleId":"111","severity":1,"message":"140","line":28,"column":8,"nodeType":"113","endLine":28,"endColumn":10,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":61,"column":52,"nodeType":"144","endLine":61,"endColumn":69},{"ruleId":"103","severity":1,"message":"104","line":11,"column":45,"nodeType":"105","messageId":"106","endLine":11,"endColumn":47},{"ruleId":"111","severity":1,"message":"115","line":16,"column":97,"nodeType":"113","endLine":16,"endColumn":130,"suggestions":"145"},{"ruleId":"111","severity":1,"message":"115","line":21,"column":8,"nodeType":"113","endLine":21,"endColumn":41,"suggestions":"146"},{"ruleId":"111","severity":1,"message":"115","line":25,"column":8,"nodeType":"113","endLine":25,"endColumn":41,"suggestions":"147"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["148"],"no-negated-in-lhs",["149"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.todolist.id'. Either include them or remove the dependency array.","ArrayExpression",["150"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["151"],["152"],["153"],["154"],["155"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["156"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["157"],["158"],["159"],["160"],["161"],["162"],["163"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.","'Menu' is defined but never used.","'Container' is defined but never used.","'IconButton' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["164"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["165"],["166"],["167"],"no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"170","fix":"172"},{"desc":"170","fix":"173"},{"desc":"170","fix":"174"},{"desc":"170","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"178","fix":"180"},{"desc":"178","fix":"181"},{"desc":"178","fix":"182"},{"desc":"178","fix":"183"},{"desc":"178","fix":"184"},{"desc":"178","fix":"185"},{"desc":"178","fix":"186"},{"desc":"170","fix":"187"},{"desc":"170","fix":"188"},{"desc":"170","fix":"189"},"Update the dependencies array to be: [dispatch, props.todolist.id]",{"range":"190","text":"191"},"Update the dependencies array to be: [props]",{"range":"192","text":"193"},{"range":"194","text":"193"},{"range":"195","text":"193"},{"range":"196","text":"193"},{"range":"197","text":"193"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"198","text":"199"},"Update the dependencies array to be: [dispatch]",{"range":"200","text":"201"},{"range":"202","text":"201"},{"range":"203","text":"201"},{"range":"204","text":"201"},{"range":"205","text":"201"},{"range":"206","text":"201"},{"range":"207","text":"201"},{"range":"208","text":"201"},{"range":"209","text":"193"},{"range":"210","text":"193"},{"range":"211","text":"193"},[1395,1397],"[dispatch, props.todolist.id]",[1512,1546],"[props]",[1777,1823],[1922,1961],[2064,2103],[2212,2251],[1287,1289],"[dispatch, isLoggedIn]",[1458,1460],"[dispatch]",[1629,1631],[1834,1836],[2047,2049],[2248,2250],[2395,2397],[2574,2576],[1434,1436],[820,853],[1126,1159],[1316,1349]]